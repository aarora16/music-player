{"ast":null,"code":"/**\n *\n * @namespace faker.date\n */\nvar _Date = function (faker) {\n  var self = this;\n  /**\n   * past\n   *\n   * @method faker.date.past\n   * @param {number} years\n   * @param {date} refDate\n   */\n\n  self.past = function (years, refDate) {\n    var date = new Date();\n\n    if (typeof refDate !== \"undefined\") {\n      date = new Date(Date.parse(refDate));\n    }\n\n    var range = {\n      min: 1000,\n      max: (years || 1) * 365 * 24 * 3600 * 1000\n    };\n    var past = date.getTime();\n    past -= faker.random.number(range); // some time from now to N years ago, in milliseconds\n\n    date.setTime(past);\n    return date;\n  };\n  /**\n   * future\n   *\n   * @method faker.date.future\n   * @param {number} years\n   * @param {date} refDate\n   */\n\n\n  self.future = function (years, refDate) {\n    var date = new Date();\n\n    if (typeof refDate !== \"undefined\") {\n      date = new Date(Date.parse(refDate));\n    }\n\n    var range = {\n      min: 1000,\n      max: (years || 1) * 365 * 24 * 3600 * 1000\n    };\n    var future = date.getTime();\n    future += faker.random.number(range); // some time from now to N years later, in milliseconds\n\n    date.setTime(future);\n    return date;\n  };\n  /**\n   * between\n   *\n   * @method faker.date.between\n   * @param {date} from\n   * @param {date} to\n   */\n\n\n  self.between = function (from, to) {\n    var fromMilli = Date.parse(from);\n    var dateOffset = faker.random.number(Date.parse(to) - fromMilli);\n    var newDate = new Date(fromMilli + dateOffset);\n    return newDate;\n  };\n  /**\n   * recent\n   *\n   * @method faker.date.recent\n   * @param {number} days\n   * @param {date} refDate\n   */\n\n\n  self.recent = function (days, refDate) {\n    var date = new Date();\n\n    if (typeof refDate !== \"undefined\") {\n      date = new Date(Date.parse(refDate));\n    }\n\n    var range = {\n      min: 1000,\n      max: (days || 1) * 24 * 3600 * 1000\n    };\n    var future = date.getTime();\n    future -= faker.random.number(range); // some time from now to N days ago, in milliseconds\n\n    date.setTime(future);\n    return date;\n  };\n  /**\n   * soon\n   *\n   * @method faker.date.soon\n   * @param {number} days\n   * @param {date} refDate\n   */\n\n\n  self.soon = function (days, refDate) {\n    var date = new Date();\n\n    if (typeof refDate !== \"undefined\") {\n      date = new Date(Date.parse(refDate));\n    }\n\n    var range = {\n      min: 1000,\n      max: (days || 1) * 24 * 3600 * 1000\n    };\n    var future = date.getTime();\n    future += faker.random.number(range); // some time from now to N days later, in milliseconds\n\n    date.setTime(future);\n    return date;\n  };\n  /**\n   * month\n   *\n   * @method faker.date.month\n   * @param {object} options\n   */\n\n\n  self.month = function (options) {\n    options = options || {};\n    var type = 'wide';\n\n    if (options.abbr) {\n      type = 'abbr';\n    }\n\n    if (options.context && typeof faker.definitions.date.month[type + '_context'] !== 'undefined') {\n      type += '_context';\n    }\n\n    var source = faker.definitions.date.month[type];\n    return faker.random.arrayElement(source);\n  };\n  /**\n   * weekday\n   *\n   * @param {object} options\n   * @method faker.date.weekday\n   */\n\n\n  self.weekday = function (options) {\n    options = options || {};\n    var type = 'wide';\n\n    if (options.abbr) {\n      type = 'abbr';\n    }\n\n    if (options.context && typeof faker.definitions.date.weekday[type + '_context'] !== 'undefined') {\n      type += '_context';\n    }\n\n    var source = faker.definitions.date.weekday[type];\n    return faker.random.arrayElement(source);\n  };\n\n  return self;\n};\n\nmodule['exports'] = _Date;","map":{"version":3,"sources":["/Users/dbrisco/Flatiron/phase-4/frontend-musicplayer/node_modules/faker/lib/date.js"],"names":["_Date","faker","self","past","years","refDate","date","Date","parse","range","min","max","getTime","random","number","setTime","future","between","from","to","fromMilli","dateOffset","newDate","recent","days","soon","month","options","type","abbr","context","definitions","source","arrayElement","weekday","module"],"mappings":"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","sourcesContent":["/**\n *\n * @namespace faker.date\n */\nvar _Date = function (faker) {\n  var self = this;\n  /**\n   * past\n   *\n   * @method faker.date.past\n   * @param {number} years\n   * @param {date} refDate\n   */\n  self.past = function (years, refDate) {\n      var date = new Date();\n      if (typeof refDate !== \"undefined\") {\n          date = new Date(Date.parse(refDate));\n      }\n\n      var range = {\n        min: 1000,\n        max: (years || 1) * 365 * 24 * 3600 * 1000\n      };\n\n      var past = date.getTime();\n      past -= faker.random.number(range); // some time from now to N years ago, in milliseconds\n      date.setTime(past);\n\n      return date;\n  };\n\n  /**\n   * future\n   *\n   * @method faker.date.future\n   * @param {number} years\n   * @param {date} refDate\n   */\n  self.future = function (years, refDate) {\n      var date = new Date();\n      if (typeof refDate !== \"undefined\") {\n          date = new Date(Date.parse(refDate));\n      }\n\n      var range = {\n        min: 1000,\n        max: (years || 1) * 365 * 24 * 3600 * 1000\n      };\n\n      var future = date.getTime();\n      future += faker.random.number(range); // some time from now to N years later, in milliseconds\n      date.setTime(future);\n\n      return date;\n  };\n\n  /**\n   * between\n   *\n   * @method faker.date.between\n   * @param {date} from\n   * @param {date} to\n   */\n  self.between = function (from, to) {\n      var fromMilli = Date.parse(from);\n      var dateOffset = faker.random.number(Date.parse(to) - fromMilli);\n\n      var newDate = new Date(fromMilli + dateOffset);\n\n      return newDate;\n  };\n\n  /**\n   * recent\n   *\n   * @method faker.date.recent\n   * @param {number} days\n   * @param {date} refDate\n   */\n  self.recent = function (days, refDate) {\n      var date = new Date();\n      if (typeof refDate !== \"undefined\") {\n          date = new Date(Date.parse(refDate));\n      }\n\n      var range = {\n        min: 1000,\n        max: (days || 1) * 24 * 3600 * 1000\n      };\n\n      var future = date.getTime();\n      future -= faker.random.number(range); // some time from now to N days ago, in milliseconds\n      date.setTime(future);\n\n      return date;\n  };\n\n  /**\n   * soon\n   *\n   * @method faker.date.soon\n   * @param {number} days\n   * @param {date} refDate\n   */\n  self.soon = function (days, refDate) {\n      var date = new Date();\n      if (typeof refDate !== \"undefined\") {\n          date = new Date(Date.parse(refDate));\n      }\n\n      var range = {\n        min: 1000,\n        max: (days || 1) * 24 * 3600 * 1000\n      };\n\n      var future = date.getTime();\n      future += faker.random.number(range); // some time from now to N days later, in milliseconds\n      date.setTime(future);\n\n      return date;\n  };\n\n  /**\n   * month\n   *\n   * @method faker.date.month\n   * @param {object} options\n   */\n  self.month = function (options) {\n      options = options || {};\n\n      var type = 'wide';\n      if (options.abbr) {\n          type = 'abbr';\n      }\n      if (options.context && typeof faker.definitions.date.month[type + '_context'] !== 'undefined') {\n          type += '_context';\n      }\n\n      var source = faker.definitions.date.month[type];\n\n      return faker.random.arrayElement(source);\n  };\n\n  /**\n   * weekday\n   *\n   * @param {object} options\n   * @method faker.date.weekday\n   */\n  self.weekday = function (options) {\n      options = options || {};\n\n      var type = 'wide';\n      if (options.abbr) {\n          type = 'abbr';\n      }\n      if (options.context && typeof faker.definitions.date.weekday[type + '_context'] !== 'undefined') {\n          type += '_context';\n      }\n\n      var source = faker.definitions.date.weekday[type];\n\n      return faker.random.arrayElement(source);\n  };\n\n  return self;\n\n};\n\nmodule['exports'] = _Date;\n"]},"metadata":{},"sourceType":"script"}