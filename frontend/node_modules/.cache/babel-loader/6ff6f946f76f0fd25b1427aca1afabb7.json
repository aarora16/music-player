{"ast":null,"code":"var mersenne = require('../vendor/mersenne');\n/**\n *\n * @namespace faker.random\n */\n\n\nfunction Random(faker, seed) {\n  // Use a user provided seed if it exists\n  if (seed) {\n    if (Array.isArray(seed) && seed.length) {\n      mersenne.seed_array(seed);\n    } else {\n      mersenne.seed(seed);\n    }\n  }\n  /**\n   * returns a single random number based on a max number or range\n   *\n   * @method faker.random.number\n   * @param {mixed} options {min, max, precision}\n   */\n\n\n  this.number = function (options) {\n    if (typeof options === \"number\") {\n      options = {\n        max: options\n      };\n    }\n\n    options = options || {};\n\n    if (typeof options.min === \"undefined\") {\n      options.min = 0;\n    }\n\n    if (typeof options.max === \"undefined\") {\n      options.max = 99999;\n    }\n\n    if (typeof options.precision === \"undefined\") {\n      options.precision = 1;\n    } // Make the range inclusive of the max value\n\n\n    var max = options.max;\n\n    if (max >= 0) {\n      max += options.precision;\n    }\n\n    var randomNumber = Math.floor(mersenne.rand(max / options.precision, options.min / options.precision)); // Workaround problem in Float point arithmetics for e.g. 6681493 / 0.01\n\n    randomNumber = randomNumber / (1 / options.precision);\n    return randomNumber;\n  };\n  /**\n   * returns a single random floating-point number based on a max number or range\n   *\n   * @method faker.random.float\n   * @param {mixed} options\n   */\n\n\n  this.float = function (options) {\n    if (typeof options === \"number\") {\n      options = {\n        precision: options\n      };\n    }\n\n    options = options || {};\n    var opts = {};\n\n    for (var p in options) {\n      opts[p] = options[p];\n    }\n\n    if (typeof opts.precision === 'undefined') {\n      opts.precision = 0.01;\n    }\n\n    return faker.random.number(opts);\n  };\n  /**\n   * takes an array and returns a random element of the array\n   *\n   * @method faker.random.arrayElement\n   * @param {array} array\n   */\n\n\n  this.arrayElement = function (array) {\n    array = array || [\"a\", \"b\", \"c\"];\n    var r = faker.random.number({\n      max: array.length - 1\n    });\n    return array[r];\n  };\n  /**\n   * takes an array and returns a subset with random elements of the array\n   *\n   * @method faker.random.arrayElements\n   * @param {array} array\n   * @param {number} count number of elements to pick\n   */\n\n\n  this.arrayElements = function (array, count) {\n    array = array || [\"a\", \"b\", \"c\"];\n\n    if (typeof count !== 'number') {\n      count = faker.random.number({\n        min: 1,\n        max: array.length\n      });\n    } else if (count > array.length) {\n      count = array.length;\n    } else if (count < 0) {\n      count = 0;\n    }\n\n    var arrayCopy = array.slice();\n    var countToRemove = arrayCopy.length - count;\n\n    for (var i = 0; i < countToRemove; i++) {\n      var indexToRemove = faker.random.number({\n        max: arrayCopy.length - 1\n      });\n      arrayCopy.splice(indexToRemove, 1);\n    }\n\n    return arrayCopy;\n  };\n  /**\n   * takes an object and returns the randomly key or value\n   *\n   * @method faker.random.objectElement\n   * @param {object} object\n   * @param {mixed} field\n   */\n\n\n  this.objectElement = function (object, field) {\n    object = object || {\n      \"foo\": \"bar\",\n      \"too\": \"car\"\n    };\n    var array = Object.keys(object);\n    var key = faker.random.arrayElement(array);\n    return field === \"key\" ? key : object[key];\n  };\n  /**\n   * uuid\n   *\n   * @method faker.random.uuid\n   */\n\n\n  this.uuid = function () {\n    var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n\n    var replacePlaceholders = function (placeholder) {\n      var random = faker.random.number({\n        min: 0,\n        max: 15\n      });\n      var value = placeholder == 'x' ? random : random & 0x3 | 0x8;\n      return value.toString(16);\n    };\n\n    return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);\n  };\n  /**\n   * boolean\n   *\n   * @method faker.random.boolean\n   */\n\n\n  this.boolean = function () {\n    return !!faker.random.number(1);\n  }; // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc\n\n  /**\n   * word\n   *\n   * @method faker.random.word\n   * @param {string} type\n   */\n\n\n  this.word = function randomWord(type) {\n    var wordMethods = ['commerce.department', 'commerce.productName', 'commerce.productAdjective', 'commerce.productMaterial', 'commerce.product', 'commerce.color', 'company.catchPhraseAdjective', 'company.catchPhraseDescriptor', 'company.catchPhraseNoun', 'company.bsAdjective', 'company.bsBuzz', 'company.bsNoun', 'address.streetSuffix', 'address.county', 'address.country', 'address.state', 'finance.accountName', 'finance.transactionType', 'finance.currencyName', 'hacker.noun', 'hacker.verb', 'hacker.adjective', 'hacker.ingverb', 'hacker.abbreviation', 'name.jobDescriptor', 'name.jobArea', 'name.jobType']; // randomly pick from the many faker methods that can generate words\n\n    var randomWordMethod = faker.random.arrayElement(wordMethods);\n    var result = faker.fake('{{' + randomWordMethod + '}}');\n    return faker.random.arrayElement(result.split(' '));\n  };\n  /**\n   * randomWords\n   *\n   * @method faker.random.words\n   * @param {number} count defaults to a random value between 1 and 3\n   */\n\n\n  this.words = function randomWords(count) {\n    var words = [];\n\n    if (typeof count === \"undefined\") {\n      count = faker.random.number({\n        min: 1,\n        max: 3\n      });\n    }\n\n    for (var i = 0; i < count; i++) {\n      words.push(faker.random.word());\n    }\n\n    return words.join(' ');\n  };\n  /**\n   * locale\n   *\n   * @method faker.random.image\n   */\n\n\n  this.image = function randomImage() {\n    return faker.image.image();\n  };\n  /**\n   * locale\n   *\n   * @method faker.random.locale\n   */\n\n\n  this.locale = function randomLocale() {\n    return faker.random.arrayElement(Object.keys(faker.locales));\n  };\n  /**\n  * alpha. returns lower/upper alpha characters based count and upcase options\n  *\n  * @method faker.random.alpha\n  * @param {mixed} options // defaults to { count: 1, upcase: false }\n  */\n\n\n  this.alpha = function alpha(options) {\n    if (typeof options === \"undefined\") {\n      options = {\n        count: 1\n      };\n    } else if (typeof options === \"number\") {\n      options = {\n        count: options\n      };\n    } else if (typeof options.count === \"undefined\") {\n      options.count = 1;\n    }\n\n    if (typeof options.upcase === \"undefined\") {\n      options.upcase = false;\n    }\n\n    var wholeString = \"\";\n\n    for (var i = 0; i < options.count; i++) {\n      wholeString += faker.random.arrayElement([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]);\n    }\n\n    return options.upcase ? wholeString.toUpperCase() : wholeString;\n  };\n  /**\n   * alphaNumeric\n   *\n   * @method faker.random.alphaNumeric\n   * @param {number} count defaults to 1\n   */\n\n\n  this.alphaNumeric = function alphaNumeric(count) {\n    if (typeof count === \"undefined\") {\n      count = 1;\n    }\n\n    var wholeString = \"\";\n\n    for (var i = 0; i < count; i++) {\n      wholeString += faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]);\n    }\n\n    return wholeString;\n  };\n  /**\n   * hexaDecimal\n   *\n   * @method faker.random.hexaDecimal\n   * @param {number} count defaults to 1\n   */\n\n\n  this.hexaDecimal = function hexaDecimal(count) {\n    if (typeof count === \"undefined\") {\n      count = 1;\n    }\n\n    var wholeString = \"\";\n\n    for (var i = 0; i < count; i++) {\n      wholeString += faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]);\n    }\n\n    return \"0x\" + wholeString;\n  };\n\n  return this;\n}\n\nmodule['exports'] = Random;","map":{"version":3,"sources":["/Users/dbrisco/Flatiron/phase-4/frontend-musicplayer/node_modules/faker/lib/random.js"],"names":["mersenne","require","Random","faker","seed","Array","isArray","length","seed_array","number","options","max","min","precision","randomNumber","Math","floor","rand","float","opts","p","random","arrayElement","array","r","arrayElements","count","arrayCopy","slice","countToRemove","i","indexToRemove","splice","objectElement","object","field","Object","keys","key","uuid","RFC4122_TEMPLATE","replacePlaceholders","placeholder","value","toString","replace","boolean","word","randomWord","type","wordMethods","randomWordMethod","result","fake","split","words","randomWords","push","join","image","randomImage","locale","randomLocale","locales","alpha","upcase","wholeString","toUpperCase","alphaNumeric","hexaDecimal","module"],"mappings":"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","sourcesContent":["var mersenne = require('../vendor/mersenne');\n\n/**\n *\n * @namespace faker.random\n */\nfunction Random (faker, seed) {\n  // Use a user provided seed if it exists\n  if (seed) {\n    if (Array.isArray(seed) && seed.length) {\n      mersenne.seed_array(seed);\n    }\n    else {\n      mersenne.seed(seed);\n    }\n  }\n  /**\n   * returns a single random number based on a max number or range\n   *\n   * @method faker.random.number\n   * @param {mixed} options {min, max, precision}\n   */\n  this.number = function (options) {\n\n    if (typeof options === \"number\") {\n      options = {\n        max: options\n      };\n    }\n\n    options = options || {};\n\n    if (typeof options.min === \"undefined\") {\n      options.min = 0;\n    }\n\n    if (typeof options.max === \"undefined\") {\n      options.max = 99999;\n    }\n    if (typeof options.precision === \"undefined\") {\n      options.precision = 1;\n    }\n\n    // Make the range inclusive of the max value\n    var max = options.max;\n    if (max >= 0) {\n      max += options.precision;\n    }\n\n    var randomNumber = Math.floor(\n      mersenne.rand(max / options.precision, options.min / options.precision));\n    // Workaround problem in Float point arithmetics for e.g. 6681493 / 0.01\n    randomNumber = randomNumber / (1 / options.precision);\n\n    return randomNumber;\n\n  }\n\n  /**\n   * returns a single random floating-point number based on a max number or range\n   *\n   * @method faker.random.float\n   * @param {mixed} options\n   */\n  this.float = function (options) {\n      if (typeof options === \"number\") {\n        options = {\n          precision: options\n        };\n      }\n      options = options || {};\n      var opts = {};\n      for (var p in options) {\n        opts[p] = options[p];\n      }\n      if (typeof opts.precision === 'undefined') {\n        opts.precision = 0.01;\n      }\n      return faker.random.number(opts);\n  }\n  \n  /**\n   * takes an array and returns a random element of the array\n   *\n   * @method faker.random.arrayElement\n   * @param {array} array\n   */\n  this.arrayElement = function (array) {\n      array = array || [\"a\", \"b\", \"c\"];\n      var r = faker.random.number({ max: array.length - 1 });\n      return array[r];\n  }\n\n  /**\n   * takes an array and returns a subset with random elements of the array\n   *\n   * @method faker.random.arrayElements\n   * @param {array} array\n   * @param {number} count number of elements to pick\n   */\n  this.arrayElements = function (array, count) {\n      array = array || [\"a\", \"b\", \"c\"];\n\n      if (typeof count !== 'number') {\n        count = faker.random.number({ min: 1, max: array.length });\n      } else if (count > array.length) {\n        count = array.length;\n      } else if (count < 0) {\n        count = 0;\n      }\n\n      var arrayCopy = array.slice();\n      var countToRemove = arrayCopy.length - count;\n      for (var i = 0; i < countToRemove; i++) {\n        var indexToRemove = faker.random.number({ max: arrayCopy.length - 1 });\n        arrayCopy.splice(indexToRemove, 1);\n      }\n\n      return arrayCopy;\n  }\n\n  /**\n   * takes an object and returns the randomly key or value\n   *\n   * @method faker.random.objectElement\n   * @param {object} object\n   * @param {mixed} field\n   */\n  this.objectElement = function (object, field) {\n      object = object || { \"foo\": \"bar\", \"too\": \"car\" };\n      var array = Object.keys(object);\n      var key = faker.random.arrayElement(array);\n\n      return field === \"key\" ? key : object[key];\n  }\n\n  /**\n   * uuid\n   *\n   * @method faker.random.uuid\n   */\n  this.uuid = function () {\n      var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n      var replacePlaceholders = function (placeholder) {\n          var random = faker.random.number({ min: 0, max: 15 });\n          var value = placeholder == 'x' ? random : (random &0x3 | 0x8);\n          return value.toString(16);\n      };\n      return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);\n  }\n\n  /**\n   * boolean\n   *\n   * @method faker.random.boolean\n   */\n  this.boolean = function () {\n      return !!faker.random.number(1)\n  }\n\n  // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc\n  /**\n   * word\n   *\n   * @method faker.random.word\n   * @param {string} type\n   */\n  this.word = function randomWord (type) {\n\n    var wordMethods = [\n    'commerce.department',\n    'commerce.productName',\n    'commerce.productAdjective',\n    'commerce.productMaterial',\n    'commerce.product',\n    'commerce.color',\n\n    'company.catchPhraseAdjective',\n    'company.catchPhraseDescriptor',\n    'company.catchPhraseNoun',\n    'company.bsAdjective',\n    'company.bsBuzz',\n    'company.bsNoun',\n    'address.streetSuffix',\n    'address.county',\n    'address.country',\n    'address.state',\n\n    'finance.accountName',\n    'finance.transactionType',\n    'finance.currencyName',\n\n    'hacker.noun',\n    'hacker.verb',\n    'hacker.adjective',\n    'hacker.ingverb',\n    'hacker.abbreviation',\n\n    'name.jobDescriptor',\n    'name.jobArea',\n    'name.jobType'];\n\n    // randomly pick from the many faker methods that can generate words\n    var randomWordMethod = faker.random.arrayElement(wordMethods);\n    var result = faker.fake('{{' + randomWordMethod + '}}');\n    return faker.random.arrayElement(result.split(' '));\n  }\n\n  /**\n   * randomWords\n   *\n   * @method faker.random.words\n   * @param {number} count defaults to a random value between 1 and 3\n   */\n  this.words = function randomWords (count) {\n    var words = [];\n    if (typeof count === \"undefined\") {\n      count = faker.random.number({min:1, max: 3});\n    }\n    for (var i = 0; i<count; i++) {\n      words.push(faker.random.word());\n    }\n    return words.join(' ');\n  }\n\n  /**\n   * locale\n   *\n   * @method faker.random.image\n   */\n  this.image = function randomImage () {\n    return faker.image.image();\n  }\n\n  /**\n   * locale\n   *\n   * @method faker.random.locale\n   */\n  this.locale = function randomLocale () {\n    return faker.random.arrayElement(Object.keys(faker.locales));\n  };\n\n    /**\n   * alpha. returns lower/upper alpha characters based count and upcase options\n   *\n   * @method faker.random.alpha\n   * @param {mixed} options // defaults to { count: 1, upcase: false }\n   */\n  this.alpha = function alpha(options) {\n    if (typeof options === \"undefined\") {\n      options = {\n        count: 1\n      }\n    } else if (typeof options === \"number\") {\n      options = {\n        count: options,\n      }\n    } else if (typeof options.count === \"undefined\") {\n      options.count = 1\n    }\n\n    if (typeof options.upcase === \"undefined\") {\n      options.upcase = false;\n    }\n\n    var wholeString = \"\";\n    for(var i = 0; i < options.count; i++) {\n      wholeString += faker.random.arrayElement([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]);\n    }\n\n    return options.upcase ? wholeString.toUpperCase() : wholeString;\n  };\n\n  /**\n   * alphaNumeric\n   *\n   * @method faker.random.alphaNumeric\n   * @param {number} count defaults to 1\n   */\n  this.alphaNumeric = function alphaNumeric(count) {\n    if (typeof count === \"undefined\") {\n      count = 1;\n    }\n\n    var wholeString = \"\";\n    for(var i = 0; i < count; i++) {\n      wholeString += faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]);\n    }\n\n    return wholeString;\n  };\n\n  /**\n   * hexaDecimal\n   *\n   * @method faker.random.hexaDecimal\n   * @param {number} count defaults to 1\n   */\n  this.hexaDecimal = function hexaDecimal(count) {\n    if (typeof count === \"undefined\") {\n      count = 1;\n    }\n\n    var wholeString = \"\";\n    for(var i = 0; i < count; i++) {\n      wholeString += faker.random.arrayElement([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]);\n    }\n\n    return \"0x\"+wholeString;\n  };\n\n  return this;\n\n}\n\nmodule['exports'] = Random;\n"]},"metadata":{},"sourceType":"script"}